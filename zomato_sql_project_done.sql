

CREATE TABLE Customer (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone VARCHAR(15),
    address VARCHAR(200),
    join_date DATE,
    loyalty_points INT DEFAULT 0
);

INSERT INTO Customer VALUES
(1, 'Rahul Sharma', 'rahul.sharma@email.com', '9876543210', '123 MG Road, Bangalore', '2022-01-15', 150),
(2, 'Priya Patel', 'priya.patel@email.com', '8765432109', '45 Koramangala, Bangalore', '2022-02-20', 75),
(3, 'Amit Singh', 'amit.singh@email.com', '7654321098', '78 Indiranagar, Bangalore', '2022-03-10', 200),
(4, 'Neha Gupta', 'neha.gupta@email.com', '6543210987', '56 Whitefield, Bangalore', '2022-01-05', 50),
(5, 'Vikram Joshi', 'vikram.joshi@email.com', '9432109876', '34 Jayanagar, Bangalore', '2022-04-18', 300);

CREATE TABLE Restaurant (
    restaurant_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    cuisine_type VARCHAR(50),
    address VARCHAR(200),
    phone VARCHAR(15),
    rating DECIMAL(3,1),
    is_active BOOLEAN DEFAULT TRUE
);

INSERT INTO Restaurant VALUES
(101, 'Spice Garden', 'North Indian', '12 Brigade Road, Bangalore', '08023456789', 4.5, TRUE),
(102, 'Pasta Palace', 'Italian', '23 Church Street, Bangalore', '08034567890', 4.2, TRUE),
(103, 'Sushi World', 'Japanese', '78 Lavelle Road, Bangalore', '08045678901', 4.7, TRUE),
(104, 'Burger Hub', 'American', '56 Commercial Street, Bangalore', '08056789012', 3.9, TRUE),
(105, 'Dosa Plaza', 'South Indian', '34 Residency Road, Bangalore', '08067890123', 4.1, TRUE);

CREATE TABLE Rider (
    rider_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(15),
    vehicle_type VARCHAR(50),
    vehicle_number VARCHAR(20),
    rating DECIMAL(3,1),
    is_available BOOLEAN DEFAULT TRUE
);

INSERT INTO Rider VALUES
(201, 'Ramesh Kumar', '9876543211', 'Bike', 'KA01AB1234', 4.3, TRUE),
(202, 'Suresh Patel', '8765432112', 'Bike', 'KA02CD5678', 4.0, FALSE),
(203, 'Deepak Sharma', '7654321123', 'Scooter', 'KA03EF9012', 4.7, TRUE),
(204, 'Anita Reddy', '6543211234', 'Bicycle', 'KA04GH3456', 4.2, TRUE),
(205, 'Mohammed Khan', '9432112345', 'Bike', 'KA05IJ7890', 3.8, FALSE);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    restaurant_id INT,
    order_date TIMESTAMP,
    total_amount DECIMAL(10,2),
    payment_method VARCHAR(50),
    status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    FOREIGN KEY (restaurant_id) REFERENCES Restaurant(restaurant_id)
);

INSERT INTO Orders VALUES
(1001, 1, 101, '2023-01-10 12:30:00', 450.00, 'Credit Card', 'Delivered'),
(1002, 2, 103, '2023-01-10 13:15:00', 1200.00, 'UPI', 'Delivered'),
(1003, 3, 102, '2023-01-11 19:45:00', 650.00, 'Cash on Delivery', 'Cancelled'),
(1004, 4, 105, '2023-01-12 08:20:00', 280.00, 'Debit Card', 'Delivered'),
(1005, 5, 104, '2023-01-12 20:10:00', 350.00, 'UPI', 'In Transit'),
(1006, 1, 102, '2023-01-13 14:00:00', 750.00, 'Credit Card', 'Preparing'),
(1007, 3, 101, '2023-01-13 21:30:00', 520.00, 'UPI', 'Delivered');

CREATE TABLE Delivery (
    delivery_id INT PRIMARY KEY,
    order_id INT,
    rider_id INT,
    pickup_time TIMESTAMP,
    delivery_time TIMESTAMP,
    delivery_fee DECIMAL(6,2),
    customer_rating INT,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (rider_id) REFERENCES Rider(rider_id)
);

INSERT INTO Delivery VALUES
(5001, 1001, 201, '2023-01-10 12:45:00', '2023-01-10 13:20:00', 30.00, 5),
(5002, 1002, 203, '2023-01-10 13:30:00', '2023-01-10 14:05:00', 40.00, 4),
(5003, 1004, 204, '2023-01-12 08:35:00', '2023-01-12 09:15:00', 25.00, 4),
(5004, 1005, 201, '2023-01-12 20:25:00', NULL, 30.00, NULL),
(5005, 1007, 203, '2023-01-13 21:45:00', '2023-01-13 22:30:00', 35.00, 5);

select * from orders;

select c.name,email , o.orders total_amount
from zomato
order by name;

'Q1.Find all active restaurants with a rating above 4.0.'

SELECT name, cuisine_type, rating 
FROM Restaurant 
WHERE is_active = TRUE AND rating > 4.0;

'Q2.Count the number of orders placed by each customer.'

SELECT c.name, COUNT(o.order_id) AS order_count
FROM Customer c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.name;

'Q3.Find the total revenue generated by each restaurant.'

SELECT r.name, SUM(o.total_amount) AS total_revenue
FROM Restaurant r
JOIN Orders o ON r.restaurant_id = o.restaurant_id
GROUP BY r.name
ORDER BY total_revenue DESC;

'Q4.List all delivered orders with customer name, restaurant name, and rider name.'

SELECT c.name AS customer_name, r.name AS restaurant_name, 
       rd.name AS rider_name, o.order_id, o.total_amount
FROM Orders o
JOIN Customer c ON o.customer_id = c.customer_id
JOIN Restaurant r ON o.restaurant_id = r.restaurant_id
JOIN Delivery d ON o.order_id = d.order_id
JOIN Rider rd ON d.rider_id = rd.rider_id
WHERE o.status = 'Delivered';

'Q5.Find customers who have ordered from at least 2 different restaurants'

SELECT c.name, COUNT(DISTINCT o.restaurant_id) AS unique_restaurants
FROM Customer c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.name
HAVING COUNT(DISTINCT o.restaurant_id) >= 2;

'Q6.Calculate the average order value by cuisine type.'

SELECT r.cuisine_type, AVG(o.total_amount) AS avg_order_value
FROM Restaurant r
JOIN Orders o ON r.restaurant_id = o.restaurant_id
GROUP BY r.cuisine_type
ORDER BY avg_order_value DESC;

'Q7.Find the top-performing rider based on average customer rating and number of deliveries.'

SELECT r.name, 
       AVG(d.customer_rating) AS avg_rating,
       COUNT(d.delivery_id) AS delivery_count
FROM Rider r
JOIN Delivery d ON r.rider_id = d.rider_id
WHERE d.customer_rating IS NOT NULL
GROUP BY r.name
ORDER BY avg_rating DESC, delivery_count DESC
LIMIT 1;

'Q8.Display all available riders with their vehicle type'

SELECT name, vehicle_type 
FROM Rider 
WHERE is_available = TRUE;

'Q9.Find orders above â‚¹500 that were paid via UPI'

SELECT order_id, total_amount 
FROM Orders 
WHERE total_amount > 500 AND payment_method = 'UPI';

'Q10.Show cancelled orders with customer names'

SELECT o.order_id, c.name 
FROM Orders o
JOIN Customer c ON o.customer_id = c.customer_id
WHERE o.status = 'Cancelled';


-- END OF PROJECT

